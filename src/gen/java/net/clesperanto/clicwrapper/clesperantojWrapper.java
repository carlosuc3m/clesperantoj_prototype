// Targeted by JavaCPP version 1.5: DO NOT EDIT THIS FILE

package net.clesperanto.clicwrapper;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class clesperantojWrapper extends net.clesperanto.clicwrapper.clesperantoj {
    static { Loader.load(); }

// Parsed from clesperantoj.hpp

// #ifndef __INCLUDE_CLESPERANTOJ_HPP
// #define __INCLUDE_CLESPERANTOJ_HPP

// #include "clesperanto.hpp"

/**
 * \brief
 * ObjectJ just wraps an CLIc Object
 *
 * This is done so we can store Clic Objects on the java side
 *
 * However the Object itself is private so the java side doesn't need to wrap all of Object (and thus much of cl.cpp)
 *
 * Note we declare ClesperantoJ as a friend class so that ClesperantoJ can access the Object
 */
// class ObjectJ
// {
//     friend class ClesperantoJInternal;

// private:
//     cle::Image obj;

// public:
//     int getWidth();
//     int getHeight();
//     int getDepth();
// };

@NoOffset public static class ClesperantoJInternal extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ClesperantoJInternal(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ClesperantoJInternal(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ClesperantoJInternal position(long position) {
        return (ClesperantoJInternal)super.position(position);
    }

    public ClesperantoJInternal() { super((Pointer)null); allocate(); }
    private native void allocate();

    public native void sayHello();

    public native void getDeviceInfo();
}

// #endif // __INCLUDE_CLESPERANTOJ_HPP


}
