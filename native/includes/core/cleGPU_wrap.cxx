/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else




#ifndef __cleGPU_hpp
#define __cleGPU_hpp

#include "clic.hpp"
#include "cleObject.hpp"

#include <map>
#include <iostream>

namespace cle
{

/**
 * Management of GPU ressources
 *
 * GPU are physically defined by a Platform (Nvidia, AMD, Intel, etc.) and
 * a Device (GeForce RTX 3080, Radeon RX 6000, etc.). A Context is create in which
 * a GPU will operate and a CommandQueue of operation is associated to the Context
 * and Device.
 * The low-level operation of memory allocation, reading and writing are also managed
 * here, along with a memory list of built program.
 */
class GPU
{
private:
    /// GPU ressources IDs
    cl::Platform m_Platform;
    cl::Device m_Device;
    cl::Context m_Context;
    cl::CommandQueue m_CommandQueue;

    /// Built program list for reusability
    std::map<size_t, cl::Program> m_ProgramList;

    /// flag for enforce GPU to finish CommandQueue execution
    bool m_WaitForFinish = false;

protected:

    /**
     * @brief List all available Platforms.
     *
     * @return list of Platforms. Empty if none are found.
     */
    const std::vector<cl::Platform> ListPlatforms() const;

    /**
     * @brief List all available Devices.
     *
     * @param t_platform Platform you want to search the devices from.
     * @param t_device_type Device type (gpu, cpu, all).
     * @return list of Devices. Empty if none are found.
     */
    const std::vector<cl::Device> ListDevices(const cl::Platform& t_platform, const char* t_device_type) const;

    /**
     * @brief Allocate device by creating Context and CommandQueue.
     *
     * @throws std::exception::runtime_error throw if could not instantiate context.
     * @throws std::exception::runtime_error throw if could not instantiate command queue.
     */
    void AllocateDevice();

    /**
     * @brief convert template type to data type.
     *
     * @return data type (FLOAT, INT, UINT, CHAR, UCHAR, SHORT, USHORT)
     */
    template<class Type>
    const cle::Object::DataType Template2DataType() const;

    // todo: low-level copy / cast methods buffer <-> image
    // todo: void CopyBufferToBuffer(cle::Buffer&, cle::Buffer&) const;
    // todo: void CopyBufferToImage(cle::Buffer&, cle::Image&) const;
    // todo: void CopyImageToBuffer(cle::Image&, cle::Buffer&) const;
    // todo: void CopyImageToImage(cle::Image&, cle::Image&) const;

    /**
     * @brief Allocate memory on device
     *
     * @param t_buffer buffer address
     * @param t_bitsize memory size
     * @throws std::exception::runtime_error throw if fail creating buffer
     */
    void AllocateMemory(cl::Buffer& t_buffer, const size_t t_bitsize) const;

    /**
     * @brief Allocate memory on device
     *
     * @param t_image 3d image address
     * @param t_shape image shape (x,y,z)
     * @param t_format image format
     * @throws std::exception::runtime_error throw if fail creating image
     */
    void AllocateMemory(cl::Image3D& t_image, const std::array<size_t,3> t_shape, const cl::ImageFormat& t_format) const;

    /**
     * @brief Allocate memory on device
     *
     * @param t_image 2d image address
     * @param t_shape image shape (x,y,z)
     * @param t_format image format
     * @throws std::exception::runtime_error throw if fail creating image
     */
    void AllocateMemory(cl::Image2D& t_image, const std::array<size_t,3> t_shape, const cl::ImageFormat& t_format) const;

    /**
     * @brief Allocate memory on device
     *
     * @param t_image 1d image address
     * @param t_shape image shape (x,y,z)
     * @param t_format image format
     * @throws std::exception::runtime_error throw if fail creating image
     */
    void AllocateMemory(cl::Image1D& t_image, const std::array<size_t,3> t_shape, const cl::ImageFormat& t_format) const;

    /**
     * @brief Write memory on device
     *
     * @param t_buffer buffer address to write in
     * @param t_data data to write from host to device
     */
    void WriteMemory(const cl::Buffer& t_buffer, const void* t_data) const;

    /**
     * @brief Write memory on device
     *
     * @param t_image image address to write in
     * @param t_data data to write from host to device
     */
    void WriteMemory(const cl::Image& t_image, const void* t_data) const;

    /**
     * @brief Read memory from device
     *
     * @param t_buffer buffer address to read from
     * @param t_data data to write from device to host
     */
    void ReadMemory(const cl::Buffer& t_buffer, void* t_data) const;

    /**
     * @brief Read memory from device
     *
     * @param t_buffer image address to read from
     * @param t_data data to write from device to host
     */
    void ReadMemory(const cl::Image& t_image, void* t_data) const;

public:

    /**
     * @brief Default constructor. Will allocate the first available device.
     *
     * @throws std::exception::runtime_error throw if no platform detected.
     * @throws std::exception::runtime_error throw if no device detected.
     * @throws std::exception::runtime_error throw if could not allocate ressources on device.
     */
    GPU();

    /**
     * @brief Constructor. Will allocate device based on name and type.
     *
     * @param t_device_name name of device to allocate.
     * @param t_device_type type of device to allocate (default all).
     * @throws std::exception::runtime_error Fail in selecting device to allocate.
     */
    GPU(const char* t_device_name, const char* t_device_type ="all");

    /**
     * @brief Default destructor.
     */
    ~GPU();

    /**
     * @brief Will allocate device based on name and type.
     *
     * @param t_device_name name of device to allocate.
     * @param t_device_type type of device to allocate (default all).
     * @throws std::exception::runtime_error throw if no platform detected.
     * @throws std::exception::runtime_error throw if no device detected.
     * @throws std::exception::runtime_error throw if could not allocate ressources on device.
     */
    void SelectDevice(const char* t_device_name, const char* t_device_type ="all");

    /**
     * @brief Get information on current device.
     *
     * @return formated string of information on current device
     */
    const std::string Info() const;

    /**
     * @brief Get name on current device.
     *
     * @return name of current device
     */
    const std::string Name() const;

    /**
     * @brief Compute indicative score based on memory and device type.
     *
     * @return score value
     */
    const float Score() const;

    /**
     * @brief Get device method.
     *
     * @return Device
     */
    cl::Device Device() const;

    /**
     * @brief Get context method.
     *
     * @return Context
     */
    cl::Context Context() const;

    /**
     * @brief Get Commande Queue method.
     *
     * @return CommandQueue
     */
    cl::CommandQueue CommandQueue() const;

    /**
     * @brief Get platform method.
     *
     * @return Platform
     */
    cl::Platform Platform() const;

    /**
     * @brief Find program in program list.
     *
     * @param t_hash hash key generated from program sources.
     * @return true if found, false otherwise.
     */
    const bool FindProgram(const size_t t_hash) const;

    /**
     * @brief Get program in program list.
     *
     * @param t_hash hash key generated from program sources.
     * @return Program corresponding to hash key.
     * @throws std::exception::runtime_error throw if could not find program in program list.
     */
    const cl::Program GetProgram(const size_t t_hash);

    /**
     * @brief Add program to list.
     *
     * @param t_program compiled program.
     * @param t_hash hash key generated from program sources.
     * @return true if program was added with success, false otherwise.
     */
    bool AddProgram(const cl::Program& t_program, const size_t t_hash);

    /**
     * @brief Force GPU to wait for kernel to execute before going on.
     *
     * @param t_flag switch true or false.
     */
    void SetWaitForKernelToFinish(bool);

    /**
     * @brief Call CommandQueue to finish.
     */
    void Finish() const;

    /**
     * @brief Call CommandQueue to flush.
     */
    void Flush() const;

    /**
     * @brief Create empty object in device.
     *
     * @tparam Type data pixel type
     * @param t_shape shape of object to allocate (default {1,1,1}).
     * @param t_type object type, buffer or image (default buffer).
     * @return empty object.
     */
    template<class Type>
    const Object Create(const std::array<size_t,3>& t_shape ={1,1,1}, const std::string t_type ="buffer") const;

    /**
     * @brief Create object in device and write data from host to device.
     *
     * @tparam Type data pixel type
     * @param t_data data to write into Image.
     * @param t_shape shape of Image space to allocate (default {1,1,1}).
     * @param t_type object type, buffer or image (default buffer).
     * @return Image object.
     */
    template<class Type>
    const Object Push(const std::vector<Type>& t_data ={0}, const std::array<size_t,3>& t_shape ={1,1,1}, const std::string t_type ="buffer") const;

    /**
     * @brief Read object from Device to host.
     *
     * @tparam Type data pixel type
     * @param t_object object in device.
     * @return array of data.
     */
    template<class Type>
    const std::vector<Type> Pull(const Object& t_object) const;

    /**
     * @brief Define image format based on data type
     *
     * @tparam Type data pixel type
     */
    template<class Type>
    const cl::ImageFormat SetImageFormat() const;
};

template<class Type>
const cle::Object::DataType GPU::Template2DataType() const
{
    if(std::is_same<Type, float>::value) return cle::Object::FLOAT;
    if(std::is_same<Type, int>::value) return cle::Object::INT;
    if(std::is_same<Type, unsigned int>::value) return cle::Object::UINT;
    if(std::is_same<Type, char>::value) return cle::Object::CHAR;
    if(std::is_same<Type, unsigned char>::value) return cle::Object::UCHAR;
    if(std::is_same<Type, double>::value) return cle::Object::DOUBLE;
    if(std::is_same<Type, short>::value) return cle::Object::SHORT;
    if(std::is_same<Type, unsigned short>::value) return cle::Object::USHORT;
    return cle::Object::FLOAT;
}


template<class Type>
const cl::ImageFormat GPU::SetImageFormat() const
{
    // if(std::is_same<Type, float>::value)               return cl::ImageFormat (CL_INTENSITY, CL_FLOAT);
    // else if(std::is_same<Type, int>::value)            return cl::ImageFormat (CL_INTENSITY, CL_SIGNED_INT32);
    // else if(std::is_same<Type, unsigned int>::value)   return cl::ImageFormat (CL_INTENSITY, CL_UNSIGNED_INT32);
    // else if(std::is_same<Type, char>::value)           return cl::ImageFormat (CL_INTENSITY, CL_SIGNED_INT8);
    // else if(std::is_same<Type, unsigned char>::value)  return cl::ImageFormat (CL_INTENSITY, CL_UNSIGNED_INT8);
    // else if(std::is_same<Type, short>::value)          return cl::ImageFormat (CL_INTENSITY, CL_SIGNED_INT16);
    // else if(std::is_same<Type, unsigned short>::value) return cl::ImageFormat (CL_INTENSITY, CL_UNSIGNED_INT16);
    // else return cl::ImageFormat (CL_INTENSITY, CL_FLOAT);
    return cl::ImageFormat (CL_INTENSITY, CL_FLOAT);
}

template<class Type>
const Object GPU::Create(const std::array<size_t,3>& t_shape, const std::string t_type) const
{
    cl::Memory mem;
    if(t_type.find("buffer") != std::string::npos)
    {
        cl::Buffer buffer;
        AllocateMemory(buffer, t_shape[0]*t_shape[1]*t_shape[2]*sizeof(Type));
        mem = cl::Memory(buffer.get(), true);
    }
    else if(t_type.find("image") != std::string::npos)
    {
        const cl::ImageFormat image_format = this->SetImageFormat<Type>();
        if(t_shape[2]>1)
        {
            cl::Image3D image;
            AllocateMemory(image, t_shape, image_format);
            mem = cl::Memory(image.get(), true);
        }
        else if(t_shape[1]>1)
        {
            cl::Image2D image;
            AllocateMemory(image, t_shape, image_format);
            mem = cl::Memory(image.get(), true);
        }
        else
        {
            cl::Image1D image;
            AllocateMemory(image, t_shape, image_format);
            mem = cl::Memory(image.get(), true);
        }
    }
    else
    {
        throw std::runtime_error("");
    }
    return Object(mem, t_shape, this->Template2DataType<Type>());
}

template<class Type>
const Object GPU::Push(const std::vector<Type>& t_data, const std::array<size_t,3>& t_shape, const std::string t_type) const
{
    cl::Memory mem;
    if(t_type.find("buffer") != std::string::npos)
    {
        cl::Buffer buffer;
        AllocateMemory(buffer, t_shape[0]*t_shape[1]*t_shape[2]*sizeof(Type));
        WriteMemory(buffer, t_data.data());
        mem = cl::Memory(buffer.get(), true);
    }
    else if(t_type.find("image") != std::string::npos)
    {
        const cl::ImageFormat image_format = this->SetImageFormat<Type>();
        if(t_shape[2]>1)
        {
            cl::Image3D image;
            AllocateMemory(image, t_shape, image_format);
            WriteMemory(image, t_data.data());
            mem = cl::Memory(image.get(), true);
        }
        else if(t_shape[1]>1)
        {
            cl::Image2D image;
            AllocateMemory(image, t_shape, image_format);
            WriteMemory(image, t_data.data());
            mem = cl::Memory(image.get(), true);
        }
        else
        {
            cl::Image1D image;
            AllocateMemory(image, t_shape, image_format);
            WriteMemory(image, t_data.data());
            mem = cl::Memory(image.get(), true);
        }
    }
    else
    {
        throw std::runtime_error("");
    }
    return Object(mem, t_shape, this->Template2DataType<Type>());
}

template<class Type>
const std::vector<Type> GPU::Pull(const Object& t_object) const
{
    std::vector<Type> out (t_object.Size());
    switch(t_object.MemoryType())
    {
        case CL_MEM_OBJECT_BUFFER:
            {
            cl::Buffer buffer(t_object.Data().get(), true);
            ReadMemory(buffer, out.data());
            break;
            }
        case CL_MEM_OBJECT_IMAGE3D:
            {
            cl::Image3D image(t_object.Data().get(), true);
            ReadMemory(image, out.data());
            break;
            }
        case CL_MEM_OBJECT_IMAGE2D:
            {
            cl::Image2D image(t_object.Data().get(), true);
            ReadMemory(image, out.data());
            break;
            }
        case CL_MEM_OBJECT_IMAGE1D:
            {
            cl::Image1D image(t_object.Data().get(), true);
            ReadMemory(image, out.data());
            break;
            }
        default:
            throw std::runtime_error("");
    }
    return out;
}

} // namespace cle

#endif //__cleGPU_hpp



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_clesperantoJNI_new_1GPU_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cle::GPU *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cle::GPU *)new cle::GPU();
  *(cle::GPU **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clesperantoJNI_new_1GPU_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  cle::GPU *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (cle::GPU *)new cle::GPU((char const *)arg1,(char const *)arg2);
  *(cle::GPU **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clesperantoJNI_new_1GPU_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cle::GPU *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (cle::GPU *)new cle::GPU((char const *)arg1);
  *(cle::GPU **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_clesperantoJNI_delete_1GPU(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cle::GPU *arg1 = (cle::GPU *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cle::GPU **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_clesperantoJNI_GPU_1SelectDevice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  cle::GPU *arg1 = (cle::GPU *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::GPU **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->SelectDevice((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_clesperantoJNI_GPU_1SelectDevice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cle::GPU *arg1 = (cle::GPU *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::GPU **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SelectDevice((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_clesperantoJNI_GPU_1Info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cle::GPU *arg1 = (cle::GPU *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::GPU **)&jarg1; 
  result = ((cle::GPU const *)arg1)->Info();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clesperantoJNI_GPU_1Name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cle::GPU *arg1 = (cle::GPU *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::GPU **)&jarg1; 
  result = ((cle::GPU const *)arg1)->Name();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_clesperantoJNI_GPU_1Score(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  cle::GPU *arg1 = (cle::GPU *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::GPU **)&jarg1; 
  result = (float)((cle::GPU const *)arg1)->Score();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clesperantoJNI_GPU_1Device(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cle::GPU *arg1 = (cle::GPU *) 0 ;
  cl::Device result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::GPU **)&jarg1; 
  result = ((cle::GPU const *)arg1)->Device();
  *(cl::Device **)&jresult = new cl::Device((const cl::Device &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clesperantoJNI_GPU_1Context(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cle::GPU *arg1 = (cle::GPU *) 0 ;
  cl::Context result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::GPU **)&jarg1; 
  result = ((cle::GPU const *)arg1)->Context();
  *(cl::Context **)&jresult = new cl::Context((const cl::Context &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clesperantoJNI_GPU_1CommandQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cle::GPU *arg1 = (cle::GPU *) 0 ;
  cl::CommandQueue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::GPU **)&jarg1; 
  result = ((cle::GPU const *)arg1)->CommandQueue();
  *(cl::CommandQueue **)&jresult = new cl::CommandQueue((const cl::CommandQueue &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clesperantoJNI_GPU_1Platform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cle::GPU *arg1 = (cle::GPU *) 0 ;
  cl::Platform result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::GPU **)&jarg1; 
  result = ((cle::GPU const *)arg1)->Platform();
  *(cl::Platform **)&jresult = new cl::Platform((const cl::Platform &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_clesperantoJNI_GPU_1FindProgram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  cle::GPU *arg1 = (cle::GPU *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::GPU **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((cle::GPU const *)arg1)->FindProgram(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clesperantoJNI_GPU_1GetProgram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cle::GPU *arg1 = (cle::GPU *) 0 ;
  size_t arg2 ;
  cl::Program result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::GPU **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (arg1)->GetProgram(arg2);
  *(cl::Program **)&jresult = new cl::Program((const cl::Program &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_clesperantoJNI_GPU_1AddProgram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  cle::GPU *arg1 = (cle::GPU *) 0 ;
  cl::Program *arg2 = 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::GPU **)&jarg1; 
  arg2 = *(cl::Program **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cl::Program const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->AddProgram((cl::Program const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clesperantoJNI_GPU_1SetWaitForKernelToFinish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cle::GPU *arg1 = (cle::GPU *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::GPU **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetWaitForKernelToFinish(arg2);
}


SWIGEXPORT void JNICALL Java_clesperantoJNI_GPU_1Finish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cle::GPU *arg1 = (cle::GPU *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::GPU **)&jarg1; 
  ((cle::GPU const *)arg1)->Finish();
}


SWIGEXPORT void JNICALL Java_clesperantoJNI_GPU_1Flush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cle::GPU *arg1 = (cle::GPU *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::GPU **)&jarg1; 
  ((cle::GPU const *)arg1)->Flush();
}


#ifdef __cplusplus
}
#endif

