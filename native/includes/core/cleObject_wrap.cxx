/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#ifndef __cleObject_hpp
#define __cleObject_hpp

#include "clic.hpp"
#include "cleLightObject.hpp"

namespace cle
{

/**
 * generic class defining object properties
 *
 */
class Object : public LightObject
{
public:

    /**
     * @brief enum for DataType.
     */
    enum DataType { FLOAT, DOUBLE, INT, UINT, CHAR, UCHAR, SHORT, USHORT };

    /**
     * @brief Default constructor.
     */
    Object() = default;

    /**
     * @brief constructor.
     *
     * @param t_object memory object in device.
     * @param t_shape data shape as an array of 3.
     * @param t_dtype data type of the image.
     */
    Object(const cl::Memory& t_object, const std::array<size_t,3>& t_shape, const DataType t_dtype);

    /**
     * @brief Default destructor.
     */
    ~Object() =default;

    void Reset()
    {
        if(this->m_Ocl.get() != nullptr)
        {
            this->m_Ocl = cl::Memory();
        }
        this->m_dType = DataType::FLOAT;
        this->m_oType = "empty";
        this->m_ndim = 0;
        this->m_Shape = {1, 1, 1};
        this->m_Origin = {0, 0, 0};
        this->m_Region = {1, 1, 1};
    }

    /**
     * @brief Get object memory.
     *
     * @return memory object pointing to data in device.
     */
    const cl::Memory& Data() const;

    /**
     * @brief Get object memory type.
     *
     * @return memory type (CL_MEM_OBJECT_BUFFER, CL_MEM_OBJECT_IMAGE1D, etc.).
     */
    const cl_mem_object_type MemoryType() const;

    /**
     * @brief Get object memory size.
     *
     * @return memory size (in bits).
     */
    const cl::size_type MemorySize() const;

    /**
     * @brief Get object dimension.
     *
     * @return dimensionality.
     */
    const int nDim() const;

    /**
     * @brief Get object size as number of elements.
     *
     * @return number of elements.
     */
    const int Size() const;

    /**
     * @brief Get object shape (width, height, depth).
     *
     * @return shape array of size 3.
     */
    const std::array<size_t,3> Shape() const;

    /**
     * @brief Get object origin coordinate (x, y, z).
     *
     * @return coordinate array of size 3.
     */
    const std::array<size_t,3> Origin() const;

    /**
     * @brief Get object region shape (width, height, depth).
     *
     * @return shape array of size 3.
     */
    const std::array<size_t,3> Region() const;

    /**
     * @brief Get object data type.
     *
     * @return data type as Object::DataType.
     */
    const DataType Type() const;

    /**
     * @brief Get object data type.
     *
     * @return data type as string.
     */
    const char* GetDataType() const;

    /**
     * @brief Compare object data type (float, int, char, etc.).
     *
     * @param t_dtype data type to compare with
     * @return true if same data type, false otherwise.
     */
    const bool IsDataType(const char* t_dtype) const;

    /**
     * @brief Get object type (Buffer, Image, etc.).
     *
     * @return data type as string.
     */
    const char* GetObjectType() const;

    /**
     * @brief Compare object type (Buffer, Image, etc.).
     *
     * @param t_otype object type to compare with
     * @return true if same object type, false otherwise.
     */
    const bool IsObjectType(const char* t_otype) const;

    /**
     * @brief Compare Memory type.
     *
     * @param t_type object type to compare with
     * @return true if same object type, false otherwise.
     */
    const bool IsMemoryType(const cl_mem_object_type t_type) const;

    /**
     * @brief Print out operator
     *
     * @param os output stream
     * @param obj object to print out
     * @return output stream reference
     */
    // friend std::ostream& operator<<(std::ostream& os, const Object& obj);

protected:

    /// OpenCL memory object (buffer, image, etc.)
    cl::Memory m_Ocl;
    /// data type holder
    DataType m_dType = DataType::FLOAT;
    /// object type holder
    const char* m_oType = "empty";
    /// objet dimension
    int m_ndim = 0;
    /// object shape
    std::array<size_t,3> m_Shape {1, 1, 1};
    /// object origin
    std::array<size_t,3> m_Origin {0, 0, 0};
    /// object region
    std::array<size_t,3> m_Region {1, 1, 1};
};

} // namespace cle

#endif //__cleObject_hpp


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_cleObjectJNI_new_1Object_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cle::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cle::Object *)new cle::Object();
  *(cle::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cleObjectJNI_new_1Object_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  cl::Memory *arg1 = 0 ;
  std::array< size_t,3 > *arg2 = 0 ;
  cle::Object::DataType arg3 ;
  cle::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cl::Memory **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cl::Memory const & reference is null");
    return 0;
  } 
  arg2 = *(std::array< size_t,3 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< size_t,3 > const & reference is null");
    return 0;
  } 
  arg3 = (cle::Object::DataType)jarg3; 
  result = (cle::Object *)new cle::Object((cl::Memory const &)*arg1,(std::array< size_t,3 > const &)*arg2,arg3);
  *(cle::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cleObjectJNI_delete_1Object(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cle::Object *arg1 = (cle::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cle::Object **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cleObjectJNI_Object_1Reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cle::Object *arg1 = (cle::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::Object **)&jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT jlong JNICALL Java_cleObjectJNI_Object_1Data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cle::Object *arg1 = (cle::Object *) 0 ;
  cl::Memory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::Object **)&jarg1; 
  result = (cl::Memory *) &((cle::Object const *)arg1)->Data();
  *(cl::Memory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cleObjectJNI_Object_1MemoryType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cle::Object *arg1 = (cle::Object *) 0 ;
  cl_mem_object_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::Object **)&jarg1; 
  result = ((cle::Object const *)arg1)->MemoryType();
  *(cl_mem_object_type **)&jresult = new cl_mem_object_type((const cl_mem_object_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cleObjectJNI_Object_1MemorySize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cle::Object *arg1 = (cle::Object *) 0 ;
  cl::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::Object **)&jarg1; 
  result = ((cle::Object const *)arg1)->MemorySize();
  *(cl::size_type **)&jresult = new cl::size_type((const cl::size_type &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cleObjectJNI_Object_1nDim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cle::Object *arg1 = (cle::Object *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::Object **)&jarg1; 
  result = (int)((cle::Object const *)arg1)->nDim();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cleObjectJNI_Object_1Size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cle::Object *arg1 = (cle::Object *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::Object **)&jarg1; 
  result = (int)((cle::Object const *)arg1)->Size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cleObjectJNI_Object_1Shape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cle::Object *arg1 = (cle::Object *) 0 ;
  std::array< size_t,3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::Object **)&jarg1; 
  result = ((cle::Object const *)arg1)->Shape();
  *(std::array< size_t,3 > **)&jresult = new std::array< size_t,3 >((const std::array< size_t,3 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cleObjectJNI_Object_1Origin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cle::Object *arg1 = (cle::Object *) 0 ;
  std::array< size_t,3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::Object **)&jarg1; 
  result = ((cle::Object const *)arg1)->Origin();
  *(std::array< size_t,3 > **)&jresult = new std::array< size_t,3 >((const std::array< size_t,3 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cleObjectJNI_Object_1Region(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cle::Object *arg1 = (cle::Object *) 0 ;
  std::array< size_t,3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::Object **)&jarg1; 
  result = ((cle::Object const *)arg1)->Region();
  *(std::array< size_t,3 > **)&jresult = new std::array< size_t,3 >((const std::array< size_t,3 > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cleObjectJNI_Object_1Type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cle::Object *arg1 = (cle::Object *) 0 ;
  cle::Object::DataType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::Object **)&jarg1; 
  result = (cle::Object::DataType)((cle::Object const *)arg1)->Type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cleObjectJNI_Object_1GetDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cle::Object *arg1 = (cle::Object *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::Object **)&jarg1; 
  result = (char *)((cle::Object const *)arg1)->GetDataType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cleObjectJNI_Object_1IsDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cle::Object *arg1 = (cle::Object *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::Object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((cle::Object const *)arg1)->IsDataType((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cleObjectJNI_Object_1GetObjectType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cle::Object *arg1 = (cle::Object *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::Object **)&jarg1; 
  result = (char *)((cle::Object const *)arg1)->GetObjectType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cleObjectJNI_Object_1IsObjectType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cle::Object *arg1 = (cle::Object *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::Object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((cle::Object const *)arg1)->IsObjectType((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cleObjectJNI_Object_1IsMemoryType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  cle::Object *arg1 = (cle::Object *) 0 ;
  cl_mem_object_type arg2 ;
  cl_mem_object_type const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cle::Object **)&jarg1; 
  argp2 = *(cl_mem_object_type **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cl_mem_object_type const");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((cle::Object const *)arg1)->IsMemoryType(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

