/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class Object {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Object(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Object obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        cleObjectJNI.delete_Object(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Object() {
    this(cleObjectJNI.new_Object__SWIG_0(), true);
  }

  public Object(SWIGTYPE_p_cl__Memory t_object, SWIGTYPE_p_std__arrayT_size_t_3_t t_shape, Object.DataType t_dtype) {
    this(cleObjectJNI.new_Object__SWIG_1(SWIGTYPE_p_cl__Memory.getCPtr(t_object), SWIGTYPE_p_std__arrayT_size_t_3_t.getCPtr(t_shape), t_dtype.swigValue()), true);
  }

  public void Reset() {
    cleObjectJNI.Object_Reset(swigCPtr, this);
  }

  public SWIGTYPE_p_cl__Memory Data() {
    return new SWIGTYPE_p_cl__Memory(cleObjectJNI.Object_Data(swigCPtr, this), false);
  }

  public SWIGTYPE_p_cl_mem_object_type MemoryType() {
    return new SWIGTYPE_p_cl_mem_object_type(cleObjectJNI.Object_MemoryType(swigCPtr, this), true);
  }

  public SWIGTYPE_p_cl__size_type MemorySize() {
    return new SWIGTYPE_p_cl__size_type(cleObjectJNI.Object_MemorySize(swigCPtr, this), true);
  }

  public int nDim() {
    return cleObjectJNI.Object_nDim(swigCPtr, this);
  }

  public int Size() {
    return cleObjectJNI.Object_Size(swigCPtr, this);
  }

  public SWIGTYPE_p_std__arrayT_size_t_3_t Shape() {
    return new SWIGTYPE_p_std__arrayT_size_t_3_t(cleObjectJNI.Object_Shape(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__arrayT_size_t_3_t Origin() {
    return new SWIGTYPE_p_std__arrayT_size_t_3_t(cleObjectJNI.Object_Origin(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__arrayT_size_t_3_t Region() {
    return new SWIGTYPE_p_std__arrayT_size_t_3_t(cleObjectJNI.Object_Region(swigCPtr, this), true);
  }

  public Object.DataType Type() {
    return Object.DataType.swigToEnum(cleObjectJNI.Object_Type(swigCPtr, this));
  }

  public String GetDataType() {
    return cleObjectJNI.Object_GetDataType(swigCPtr, this);
  }

  public boolean IsDataType(String t_dtype) {
    return cleObjectJNI.Object_IsDataType(swigCPtr, this, t_dtype);
  }

  public String GetObjectType() {
    return cleObjectJNI.Object_GetObjectType(swigCPtr, this);
  }

  public boolean IsObjectType(String t_otype) {
    return cleObjectJNI.Object_IsObjectType(swigCPtr, this, t_otype);
  }

  public boolean IsMemoryType(SWIGTYPE_p_cl_mem_object_type t_type) {
    return cleObjectJNI.Object_IsMemoryType(swigCPtr, this, SWIGTYPE_p_cl_mem_object_type.getCPtr(t_type));
  }

  public final static class DataType {
    public final static Object.DataType FLOAT = new Object.DataType("FLOAT");
    public final static Object.DataType DOUBLE = new Object.DataType("DOUBLE");
    public final static Object.DataType INT = new Object.DataType("INT");
    public final static Object.DataType UINT = new Object.DataType("UINT");
    public final static Object.DataType CHAR = new Object.DataType("CHAR");
    public final static Object.DataType UCHAR = new Object.DataType("UCHAR");
    public final static Object.DataType SHORT = new Object.DataType("SHORT");
    public final static Object.DataType USHORT = new Object.DataType("USHORT");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static DataType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + DataType.class + " with value " + swigValue);
    }

    private DataType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private DataType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private DataType(String swigName, DataType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static DataType[] swigValues = { FLOAT, DOUBLE, INT, UINT, CHAR, UCHAR, SHORT, USHORT };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
