#ifndef __cle_preamble_h
#define __cle_preamble_h

"#pragma OPENCL EXTENSION cl_khr_3d_image_writes : enable\n"
"\n"
"#pragma OPENCL EXTENSION cl_amd_printf : enable\n"
"\n"
"#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable\n"
"\n"
"#ifndef M_PI\n"
"    #define   M_PI 3.14159265358979323846f /* pi */\n"
"#endif\n"
"\n"
"#ifndef M_LOG2E\n"
"    #define   M_LOG2E   1.4426950408889634074f /* log_2 e */\n"
"#endif\n"
" \n"
"#ifndef M_LOG10E\n"
"    #define   M_LOG10E   0.43429448190325182765f /* log_10 e */\n"
"#endif\n"
" \n"
"#ifndef M_LN2\n"
"    #define   M_LN2   0.69314718055994530942f  /* log_e 2 */\n"
"#endif\n"
"\n"
"#ifndef M_LN10\n"
"    #define   M_LN10   2.30258509299404568402f /* log_e 10 */\n"
"#endif\n"
"\n"
"#ifndef BUFFER_READ_WRITE\n"
"    #define BUFFER_READ_WRITE 1\n"
"\n"
"#define MINMAX_TYPE int\n"
"\n"
"\n"
"\n"
"\n"
"inline char2 read_buffer3dc(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global char * buffer_var, sampler_t sampler, int4 position )\n"
"{\n"
"    int4 pos = (int4){position.x, position.y, position.z, 0};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos.x = max((MINMAX_TYPE)pos.x, (MINMAX_TYPE)0);\n"
"        pos.y = max((MINMAX_TYPE)pos.y, (MINMAX_TYPE)0);\n"
"        pos.z = max((MINMAX_TYPE)pos.z, (MINMAX_TYPE)0);\n"
"        pos.x = min((MINMAX_TYPE)pos.x, (MINMAX_TYPE)read_buffer_width - 1);\n"
"        pos.y = min((MINMAX_TYPE)pos.y, (MINMAX_TYPE)read_buffer_height - 1);\n"
"        pos.z = min((MINMAX_TYPE)pos.z, (MINMAX_TYPE)read_buffer_depth - 1);\n"
"    }\n"
"    int pos_in_buffer = pos.x + pos.y * read_buffer_width + pos.z * read_buffer_width * read_buffer_height;\n"
"    if (pos.x < 0 || pos.x >= read_buffer_width || pos.y < 0 || pos.y >= read_buffer_height || pos.z < 0 || pos.z >= read_buffer_depth) {\n"
"        return (char2){0, 0};\n"
"    }\n"
"    return (char2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline uchar2 read_buffer3duc(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global uchar * buffer_var, sampler_t sampler, int4 position )\n"
"{\n"
"    int4 pos = (int4){position.x, position.y, position.z, 0};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos.x = max((MINMAX_TYPE)pos.x, (MINMAX_TYPE)0);\n"
"        pos.y = max((MINMAX_TYPE)pos.y, (MINMAX_TYPE)0);\n"
"        pos.z = max((MINMAX_TYPE)pos.z, (MINMAX_TYPE)0);\n"
"        pos.x = min((MINMAX_TYPE)pos.x, (MINMAX_TYPE)read_buffer_width - 1);\n"
"        pos.y = min((MINMAX_TYPE)pos.y, (MINMAX_TYPE)read_buffer_height - 1);\n"
"        pos.z = min((MINMAX_TYPE)pos.z, (MINMAX_TYPE)read_buffer_depth - 1);\n"
"    }\n"
"    int pos_in_buffer = pos.x + pos.y * read_buffer_width + pos.z * read_buffer_width * read_buffer_height;\n"
"    if (pos.x < 0 || pos.x >= read_buffer_width || pos.y < 0 || pos.y >= read_buffer_height || pos.z < 0 || pos.z >= read_buffer_depth) {\n"
"        return (uchar2){0, 0};\n"
"    }\n"
"    return (uchar2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline short2 read_buffer3ds(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global short * buffer_var, sampler_t sampler, int4 position )\n"
"{\n"
"    int4 pos = (int4){position.x, position.y, position.z, 0};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos.x = max((MINMAX_TYPE)pos.x, (MINMAX_TYPE)0);\n"
"        pos.y = max((MINMAX_TYPE)pos.y, (MINMAX_TYPE)0);\n"
"        pos.z = max((MINMAX_TYPE)pos.z, (MINMAX_TYPE)0);\n"
"        pos.x = min((MINMAX_TYPE)pos.x, (MINMAX_TYPE)read_buffer_width - 1);\n"
"        pos.y = min((MINMAX_TYPE)pos.y, (MINMAX_TYPE)read_buffer_height - 1);\n"
"        pos.z = min((MINMAX_TYPE)pos.z, (MINMAX_TYPE)read_buffer_depth - 1);\n"
"    }\n"
"    int pos_in_buffer = pos.x + pos.y * read_buffer_width + pos.z * read_buffer_width * read_buffer_height;\n"
"    if (pos.x < 0 || pos.x >= read_buffer_width || pos.y < 0 || pos.y >= read_buffer_height || pos.z < 0 || pos.z >= read_buffer_depth) {\n"
"        return (short2){0, 0};\n"
"    }\n"
"    return (short2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline ushort2 read_buffer3dus(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global ushort * buffer_var, sampler_t sampler, int4 position )\n"
"{\n"
"    int4 pos = (int4){position.x, position.y, position.z, 0};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos.x = max((MINMAX_TYPE)pos.x, (MINMAX_TYPE)0);\n"
"        pos.y = max((MINMAX_TYPE)pos.y, (MINMAX_TYPE)0);\n"
"        pos.z = max((MINMAX_TYPE)pos.z, (MINMAX_TYPE)0);\n"
"        pos.x = min((MINMAX_TYPE)pos.x, (MINMAX_TYPE)read_buffer_width - 1);\n"
"        pos.y = min((MINMAX_TYPE)pos.y, (MINMAX_TYPE)read_buffer_height - 1);\n"
"        pos.z = min((MINMAX_TYPE)pos.z, (MINMAX_TYPE)read_buffer_depth - 1);\n"
"    }\n"
"    int pos_in_buffer = pos.x + pos.y * read_buffer_width + pos.z * read_buffer_width * read_buffer_height;\n"
"    if (pos.x < 0 || pos.x >= read_buffer_width || pos.y < 0 || pos.y >= read_buffer_height || pos.z < 0 || pos.z >= read_buffer_depth) {\n"
"        return (ushort2){0, 0};\n"
"    }\n"
"    return (ushort2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"inline int2 read_buffer3di(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global int * buffer_var, sampler_t sampler, int4 position )\n"
"{\n"
"    int4 pos = (int4){position.x, position.y, position.z, 0};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos.x = max((MINMAX_TYPE)pos.x, (MINMAX_TYPE)0);\n"
"        pos.y = max((MINMAX_TYPE)pos.y, (MINMAX_TYPE)0);\n"
"        pos.z = max((MINMAX_TYPE)pos.z, (MINMAX_TYPE)0);\n"
"        pos.x = min((MINMAX_TYPE)pos.x, (MINMAX_TYPE)read_buffer_width - 1);\n"
"        pos.y = min((MINMAX_TYPE)pos.y, (MINMAX_TYPE)read_buffer_height - 1);\n"
"        pos.z = min((MINMAX_TYPE)pos.z, (MINMAX_TYPE)read_buffer_depth - 1);\n"
"    }\n"
"    int pos_in_buffer = pos.x + pos.y * read_buffer_width + pos.z * read_buffer_width * read_buffer_height;\n"
"    if (pos.x < 0 || pos.x >= read_buffer_width || pos.y < 0 || pos.y >= read_buffer_height || pos.z < 0 || pos.z >= read_buffer_depth) {\n"
"        return (int2){0, 0};\n"
"    }\n"
"    return (int2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline uint2 read_buffer3dui(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global uint * buffer_var, sampler_t sampler, int4 position )\n"
"{\n"
"    int4 pos = (int4){position.x, position.y, position.z, 0};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos.x = max((MINMAX_TYPE)pos.x, (MINMAX_TYPE)0);\n"
"        pos.y = max((MINMAX_TYPE)pos.y, (MINMAX_TYPE)0);\n"
"        pos.z = max((MINMAX_TYPE)pos.z, (MINMAX_TYPE)0);\n"
"        pos.x = min((MINMAX_TYPE)pos.x, (MINMAX_TYPE)read_buffer_width - 1);\n"
"        pos.y = min((MINMAX_TYPE)pos.y, (MINMAX_TYPE)read_buffer_height - 1);\n"
"        pos.z = min((MINMAX_TYPE)pos.z, (MINMAX_TYPE)read_buffer_depth - 1);\n"
"    }\n"
"    int pos_in_buffer = pos.x + pos.y * read_buffer_width + pos.z * read_buffer_width * read_buffer_height;\n"
"    if (pos.x < 0 || pos.x >= read_buffer_width || pos.y < 0 || pos.y >= read_buffer_height || pos.z < 0 || pos.z >= read_buffer_depth) {\n"
"        return (uint2){0, 0};\n"
"    }\n"
"    return (uint2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline float2 read_buffer3df(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global float* buffer_var, sampler_t sampler, int4 position )\n"
"{\n"
"    int4 pos = (int4){position.x, position.y, position.z, 0};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos.x = max((MINMAX_TYPE)pos.x, (MINMAX_TYPE)0);\n"
"        pos.y = max((MINMAX_TYPE)pos.y, (MINMAX_TYPE)0);\n"
"        pos.z = max((MINMAX_TYPE)pos.z, (MINMAX_TYPE)0);\n"
"        pos.x = min((MINMAX_TYPE)pos.x, (MINMAX_TYPE)read_buffer_width - 1);\n"
"        pos.y = min((MINMAX_TYPE)pos.y, (MINMAX_TYPE)read_buffer_height - 1);\n"
"        pos.z = min((MINMAX_TYPE)pos.z, (MINMAX_TYPE)read_buffer_depth - 1);\n"
"    }\n"
"    int pos_in_buffer = pos.x + pos.y * read_buffer_width + pos.z * read_buffer_width * read_buffer_height;\n"
"    if (pos.x < 0 || pos.x >= read_buffer_width || pos.y < 0 || pos.y >= read_buffer_height || pos.z < 0 || pos.z >= read_buffer_depth) {\n"
"        return (float2){0, 0};\n"
"    }\n"
"    return (float2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline void write_buffer3dc(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global char * buffer_var, int4 pos, char value )\n"
"{\n"
"    int pos_in_buffer = pos.x + pos.y * write_buffer_width + pos.z * write_buffer_width * write_buffer_height;\n"
"    if (pos.x < 0 || pos.x >= write_buffer_width || pos.y < 0 || pos.y >= write_buffer_height || pos.z < 0 || pos.z >= write_buffer_depth) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer3duc(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global uchar * buffer_var, int4 pos, uchar value )\n"
"{\n"
"    int pos_in_buffer = pos.x + pos.y * write_buffer_width + pos.z * write_buffer_width * write_buffer_height;\n"
"    if (pos.x < 0 || pos.x >= write_buffer_width || pos.y < 0 || pos.y >= write_buffer_height || pos.z < 0 || pos.z >= write_buffer_depth) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer3ds(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global short * buffer_var, int4 pos, short value )\n"
"{\n"
"    int pos_in_buffer = pos.x + pos.y * write_buffer_width + pos.z * write_buffer_width * write_buffer_height;\n"
"    if (pos.x < 0 || pos.x >= write_buffer_width || pos.y < 0 || pos.y >= write_buffer_height || pos.z < 0 || pos.z >= write_buffer_depth) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer3dus(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global ushort * buffer_var, int4 pos, ushort value )\n"
"{\n"
"    int pos_in_buffer = pos.x + pos.y * write_buffer_width + pos.z * write_buffer_width * write_buffer_height;\n"
"    if (pos.x < 0 || pos.x >= write_buffer_width || pos.y < 0 || pos.y >= write_buffer_height || pos.z < 0 || pos.z >= write_buffer_depth) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"\n"
"inline void write_buffer3di(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global int * buffer_var, int4 pos, int value )\n"
"{\n"
"    int pos_in_buffer = pos.x + pos.y * write_buffer_width + pos.z * write_buffer_width * write_buffer_height;\n"
"    if (pos.x < 0 || pos.x >= write_buffer_width || pos.y < 0 || pos.y >= write_buffer_height || pos.z < 0 || pos.z >= write_buffer_depth) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer3dui(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global uint * buffer_var, int4 pos, uint value )\n"
"{\n"
"    int pos_in_buffer = pos.x + pos.y * write_buffer_width + pos.z * write_buffer_width * write_buffer_height;\n"
"    if (pos.x < 0 || pos.x >= write_buffer_width || pos.y < 0 || pos.y >= write_buffer_height || pos.z < 0 || pos.z >= write_buffer_depth) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer3df(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global float* buffer_var, int4 pos, float value )\n"
"{\n"
"    int pos_in_buffer = pos.x + pos.y * write_buffer_width + pos.z * write_buffer_width * write_buffer_height;\n"
"    if (pos.x < 0 || pos.x >= write_buffer_width || pos.y < 0 || pos.y >= write_buffer_height || pos.z < 0 || pos.z >= write_buffer_depth) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline char2 read_buffer2dc(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global char * buffer_var, sampler_t sampler, int2 position )\n"
"{\n"
"    int2 pos = (int2){position.x, position.y};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos.x = max((MINMAX_TYPE)pos.x, (MINMAX_TYPE)0);\n"
"        pos.y = max((MINMAX_TYPE)pos.y, (MINMAX_TYPE)0);\n"
"        pos.x = min((MINMAX_TYPE)pos.x, (MINMAX_TYPE)read_buffer_width - 1);\n"
"        pos.y = min((MINMAX_TYPE)pos.y, (MINMAX_TYPE)read_buffer_height - 1);\n"
"    }\n"
"    int pos_in_buffer = pos.x + pos.y * read_buffer_width;\n"
"    if (pos.x < 0 || pos.x >= read_buffer_width || pos.y < 0 || pos.y >= read_buffer_height) {\n"
"        return (char2){0, 0};\n"
"    }\n"
"    return (char2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline uchar2 read_buffer2duc(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global uchar * buffer_var, sampler_t sampler, int2 position )\n"
"{\n"
"    int2 pos = (int2){position.x, position.y};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos.x = max((MINMAX_TYPE)pos.x, (MINMAX_TYPE)0);\n"
"        pos.y = max((MINMAX_TYPE)pos.y, (MINMAX_TYPE)0);\n"
"        pos.x = min((MINMAX_TYPE)pos.x, (MINMAX_TYPE)read_buffer_width - 1);\n"
"        pos.y = min((MINMAX_TYPE)pos.y, (MINMAX_TYPE)read_buffer_height - 1);\n"
"    }\n"
"    int pos_in_buffer = pos.x + pos.y * read_buffer_width;\n"
"    if (pos.x < 0 || pos.x >= read_buffer_width || pos.y < 0 || pos.y >= read_buffer_height) {\n"
"        return (uchar2){0, 0};\n"
"    }\n"
"    return (uchar2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline short2 read_buffer2ds(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global short * buffer_var, sampler_t sampler, int2 position )\n"
"{\n"
"    int2 pos = (int2){position.x, position.y};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos.x = max((MINMAX_TYPE)pos.x, (MINMAX_TYPE)0);\n"
"        pos.y = max((MINMAX_TYPE)pos.y, (MINMAX_TYPE)0);\n"
"        pos.x = min((MINMAX_TYPE)pos.x, (MINMAX_TYPE)read_buffer_width - 1);\n"
"        pos.y = min((MINMAX_TYPE)pos.y, (MINMAX_TYPE)read_buffer_height - 1);\n"
"    }\n"
"    int pos_in_buffer = pos.x + pos.y * read_buffer_width;\n"
"    if (pos.x < 0 || pos.x >= read_buffer_width || pos.y < 0 || pos.y >= read_buffer_height) {\n"
"        return (short2){0, 0};\n"
"    }\n"
"    return (short2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline ushort2 read_buffer2dus(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global ushort * buffer_var, sampler_t sampler, int2 position )\n"
"{\n"
"    int2 pos = (int2){position.x, position.y};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos.x = max((MINMAX_TYPE)pos.x, (MINMAX_TYPE)0);\n"
"        pos.y = max((MINMAX_TYPE)pos.y, (MINMAX_TYPE)0);\n"
"        pos.x = min((MINMAX_TYPE)pos.x, (MINMAX_TYPE)read_buffer_width - 1);\n"
"        pos.y = min((MINMAX_TYPE)pos.y, (MINMAX_TYPE)read_buffer_height - 1);\n"
"    }\n"
"    int pos_in_buffer = pos.x + pos.y * read_buffer_width;\n"
"    if (pos.x < 0 || pos.x >= read_buffer_width || pos.y < 0 || pos.y >= read_buffer_height) {\n"
"        return (ushort2){0, 0};\n"
"    }\n"
"    return (ushort2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline int2 read_buffer2di(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global int * buffer_var, sampler_t sampler, int2 position )\n"
"{\n"
"    int2 pos = (int2){position.x, position.y};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos.x = max((MINMAX_TYPE)pos.x, (MINMAX_TYPE)0);\n"
"        pos.y = max((MINMAX_TYPE)pos.y, (MINMAX_TYPE)0);\n"
"        pos.x = min((MINMAX_TYPE)pos.x, (MINMAX_TYPE)read_buffer_width - 1);\n"
"        pos.y = min((MINMAX_TYPE)pos.y, (MINMAX_TYPE)read_buffer_height - 1);\n"
"    }\n"
"    int pos_in_buffer = pos.x + pos.y * read_buffer_width;\n"
"    if (pos.x < 0 || pos.x >= read_buffer_width || pos.y < 0 || pos.y >= read_buffer_height) {\n"
"        return (int2){0, 0};\n"
"    }\n"
"    return (int2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline uint2 read_buffer2dui(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global uint * buffer_var, sampler_t sampler, int2 position )\n"
"{\n"
"    int2 pos = (int2){position.x, position.y};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos.x = max((MINMAX_TYPE)pos.x, (MINMAX_TYPE)0);\n"
"        pos.y = max((MINMAX_TYPE)pos.y, (MINMAX_TYPE)0);\n"
"        pos.x = min((MINMAX_TYPE)pos.x, (MINMAX_TYPE)read_buffer_width - 1);\n"
"        pos.y = min((MINMAX_TYPE)pos.y, (MINMAX_TYPE)read_buffer_height - 1);\n"
"    }\n"
"    int pos_in_buffer = pos.x + pos.y * read_buffer_width;\n"
"    if (pos.x < 0 || pos.x >= read_buffer_width || pos.y < 0 || pos.y >= read_buffer_height) {\n"
"        return (uint2){0, 0};\n"
"    }\n"
"    return (uint2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline float2 read_buffer2df(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global float* buffer_var, sampler_t sampler, int2 position )\n"
"{\n"
"    int2 pos = (int2){position.x, position.y};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos.x = max((MINMAX_TYPE)pos.x, (MINMAX_TYPE)0);\n"
"        pos.y = max((MINMAX_TYPE)pos.y, (MINMAX_TYPE)0);\n"
"        pos.x = min((MINMAX_TYPE)pos.x, (MINMAX_TYPE)read_buffer_width - 1);\n"
"        pos.y = min((MINMAX_TYPE)pos.y, (MINMAX_TYPE)read_buffer_height - 1);\n"
"    }\n"
"    int pos_in_buffer = pos.x + pos.y * read_buffer_width;\n"
"    if (pos.x < 0 || pos.x >= read_buffer_width || pos.y < 0 || pos.y >= read_buffer_height) {\n"
"        return (float2){0, 0};\n"
"    }\n"
"    return (float2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline void write_buffer2dc(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global char * buffer_var, int2 pos, char value )\n"
"{\n"
"    int pos_in_buffer = pos.x + pos.y * write_buffer_width;\n"
"    if (pos.x < 0 || pos.x >= write_buffer_width || pos.y < 0 || pos.y >= write_buffer_height) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer2duc(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global uchar * buffer_var, int2 pos, uchar value )\n"
"{\n"
"    int pos_in_buffer = pos.x + pos.y * write_buffer_width;\n"
"    if (pos.x < 0 || pos.x >= write_buffer_width || pos.y < 0 || pos.y >= write_buffer_height) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer2ds(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global short * buffer_var, int2 pos, short value )\n"
"{\n"
"    int pos_in_buffer = pos.x + pos.y * write_buffer_width;\n"
"    if (pos.x < 0 || pos.x >= write_buffer_width || pos.y < 0 || pos.y >= write_buffer_height) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer2dus(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global ushort * buffer_var, int2 pos, ushort value )\n"
"{\n"
"    int pos_in_buffer = pos.x + pos.y * write_buffer_width;\n"
"    if (pos.x < 0 || pos.x >= write_buffer_width || pos.y < 0 || pos.y >= write_buffer_height) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer2di(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global int * buffer_var, int2 pos, int value )\n"
"{\n"
"    int pos_in_buffer = pos.x + pos.y * write_buffer_width;\n"
"    if (pos.x < 0 || pos.x >= write_buffer_width || pos.y < 0 || pos.y >= write_buffer_height) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer2dui(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global uint * buffer_var, int2 pos, uint value )\n"
"{\n"
"    int pos_in_buffer = pos.x + pos.y * write_buffer_width;\n"
"    if (pos.x < 0 || pos.x >= write_buffer_width || pos.y < 0 || pos.y >= write_buffer_height) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer2df(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global float* buffer_var, int2 pos, float value )\n"
"{\n"
"    int pos_in_buffer = pos.x + pos.y * write_buffer_width;\n"
"    if (pos.x < 0 || pos.x >= write_buffer_width || pos.y < 0 || pos.y >= write_buffer_height) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline char2 read_buffer1dc(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global char * buffer_var, sampler_t sampler, int position )\n"
"{\n"
"    int pos = (int){position};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos = max((MINMAX_TYPE)pos, (MINMAX_TYPE)0);\n"
"        pos = min((MINMAX_TYPE)pos, (MINMAX_TYPE)read_buffer_width - 1);\n"
"    }\n"
"    int pos_in_buffer = pos;\n"
"    if (pos < 0 || pos >= read_buffer_width ) {\n"
"        return (char2){0,0};\n"
"    }\n"
"    return (char2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline uchar2 read_buffer1duc(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global uchar * buffer_var, sampler_t sampler, int position )\n"
"{\n"
"    int pos = (int){position};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos = max((MINMAX_TYPE)pos, (MINMAX_TYPE)0);\n"
"        pos = min((MINMAX_TYPE)pos, (MINMAX_TYPE)read_buffer_width - 1);\n"
"    }\n"
"    int pos_in_buffer = pos;\n"
"    if (pos < 0 || pos >= read_buffer_width) {\n"
"        return (uchar2){0,0};\n"
"    }\n"
"    return (uchar2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline int2 read_buffer1di(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global int * buffer_var, sampler_t sampler, int position )\n"
"{\n"
"    int pos = (int){position};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos = max((MINMAX_TYPE)pos, (MINMAX_TYPE)0);\n"
"        pos = min((MINMAX_TYPE)pos, (MINMAX_TYPE)read_buffer_width - 1);\n"
"    }\n"
"    int pos_in_buffer = pos;\n"
"    if (pos < 0 || pos >= read_buffer_width) {\n"
"        return (int2){0,0};\n"
"    }\n"
"    return (int2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline uint2 read_buffer1dui(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global uint * buffer_var, sampler_t sampler, int position )\n"
"{\n"
"    int pos = (int){position};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos = max((MINMAX_TYPE)pos, (MINMAX_TYPE)0);\n"
"        pos = min((MINMAX_TYPE)pos, (MINMAX_TYPE)read_buffer_width - 1);\n"
"    }\n"
"    int pos_in_buffer = pos;\n"
"    if (pos < 0 || pos >= read_buffer_width) {\n"
"        return (uint2){0,0};\n"
"    }\n"
"    return (uint2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline short2 read_buffer1ds(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global short * buffer_var, sampler_t sampler, int position )\n"
"{\n"
"    int pos = (int){position};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos = max((MINMAX_TYPE)pos, (MINMAX_TYPE)0);\n"
"        pos = min((MINMAX_TYPE)pos, (MINMAX_TYPE)read_buffer_width - 1);\n"
"    }\n"
"    int pos_in_buffer = pos;\n"
"    if (pos < 0 || pos >= read_buffer_width) {\n"
"        return (short2){0,0};\n"
"    }\n"
"    return (short2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline ushort2 read_buffer1dus(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global ushort * buffer_var, sampler_t sampler, int position )\n"
"{\n"
"    int pos = (int){position};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos = max((MINMAX_TYPE)pos, (MINMAX_TYPE)0);\n"
"        pos = min((MINMAX_TYPE)pos, (MINMAX_TYPE)read_buffer_width - 1);\n"
"    }\n"
"    int pos_in_buffer = pos;\n"
"    if (pos < 0 || pos >= read_buffer_width) {\n"
"        return (ushort2){0,0};\n"
"    }\n"
"    return (ushort2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline float2 read_buffer1df(int read_buffer_width, int read_buffer_height, int read_buffer_depth, __global float * buffer_var, sampler_t sampler, int position )\n"
"{\n"
"    int pos = (int){position};\n"
"    if (true) { // if (CLK_ADDRESS_CLAMP_TO_EDGE & sampler) {\n"
"        pos = max((MINMAX_TYPE)pos, (MINMAX_TYPE)0);\n"
"        pos = min((MINMAX_TYPE)pos, (MINMAX_TYPE)read_buffer_width - 1);\n"
"    }\n"
"    int pos_in_buffer = pos;\n"
"    if (pos < 0 || pos >= read_buffer_width) {\n"
"        return (float2){0,0};\n"
"    }\n"
"    return (float2){buffer_var[pos_in_buffer],0};\n"
"}\n"
"\n"
"inline void write_buffer1dc(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global char * buffer_var, int pos, char value )\n"
"{\n"
"    int pos_in_buffer = pos;\n"
"    if (pos < 0 || pos >= write_buffer_width) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer1duc(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global uchar * buffer_var, int pos, uchar value )\n"
"{\n"
"    int pos_in_buffer = pos;\n"
"    if (pos < 0 || pos >= write_buffer_width) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer1di(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global int * buffer_var, int pos, int value )\n"
"{\n"
"    int pos_in_buffer = pos;\n"
"    if (pos < 0 || pos >= write_buffer_width) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer1dus(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global ushort * buffer_var, int pos, ushort value )\n"
"{\n"
"    int pos_in_buffer = pos;\n"
"    if (pos < 0 || pos >= write_buffer_width) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer1ds(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global short * buffer_var, int pos, short value )\n"
"{\n"
"    int pos_in_buffer = pos;\n"
"    if (pos < 0 || pos >= write_buffer_width) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer1dui(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global uint * buffer_var, int pos, uint value )\n"
"{\n"
"    int pos_in_buffer = pos;\n"
"    if (pos < 0 || pos >= write_buffer_width) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline void write_buffer1df(int write_buffer_width, int write_buffer_height, int write_buffer_depth, __global float * buffer_var, int pos, float value )\n"
"{\n"
"    int pos_in_buffer = pos;\n"
"    if (pos < 0 || pos >= write_buffer_width) {\n"
"        return;\n"
"    }\n"
"    buffer_var[pos_in_buffer] = value;\n"
"}\n"
"\n"
"inline uchar clij_convert_uchar_sat(float value) {\n"
"    if (value > 255) {\n"
"        return 255;\n"
"    }\n"
"    if (value < 0) {\n"
"        return 0;\n"
"    }\n"
"    return (uchar)value;\n"
"}\n"
"\n"
"\n"
"inline char clij_convert_char_sat(float value) {\n"
"    if (value > 127) {\n"
"        return 127;\n"
"    }\n"
"    if (value < -128) {\n"
"        return -128;\n"
"    }\n"
"    return (char)value;\n"
"}\n"
"\n"
"\n"
"inline ushort clij_convert_ushort_sat(float value) {\n"
"    if (value > 65535) {\n"
"        return 65535;\n"
"    }\n"
"    if (value < 0) {\n"
"        return 0;\n"
"    }\n"
"    return (ushort)value;\n"
"}\n"
"\n"
"\n"
"inline short clij_convert_short_sat(float value) {\n"
"    if (value > 32767) {\n"
"        return 32767;\n"
"    }\n"
"    if (value < -32768) {\n"
"        return -32768;\n"
"    }\n"
"    return (short)value;\n"
"}\n"
"\n"
"inline uint clij_convert_uint_sat(float value) {\n"
"    if (value > 4294967295) {\n"
"        return 4294967295;\n"
"    }\n"
"    if (value < 0) {\n"
"        return 0;\n"
"    }\n"
"    return (uint)value;\n"
"}\n"
"\n"
"inline int clij_convert_int_sat(float value) {\n"
"    if (value > 2147483647) {\n"
"        return 2147483647;\n"
"    }\n"
"    if (value < -2147483648) {\n"
"        return -2147483648;\n"
"    }\n"
"    return (int)value;\n"
"}\n"
"\n"
"inline float clij_convert_float_sat(float value) {\n"
"    return value;\n"
"}\n"
"\n"
"#define READ_IMAGE(a,b,c) READ_ ## a ## _IMAGE(a,b,c)\n"
"#define WRITE_IMAGE(a,b,c) WRITE_ ## a ## _IMAGE(a,b,c)\n"
"\n"
"#endif\n"
"\n"
"\n"
"\n"

#endif //__cle_preamble_h
